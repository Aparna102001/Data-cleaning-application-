import tkinter as tk
from tkinter import ttk, filedialog, simpledialog
import pandas as pd


class DataCleaningApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Data Cleaning App")

        self.df = None

        self.load_button = tk.Button(self.master, text="Load Dataset", command=self.load_dataset)
        self.load_button.pack(pady=10)

        self.add_button = tk.Button(self.master, text="Add Column", command=self.add_new_column)
        self.add_button.pack(pady=10)

        self.update_button = tk.Button(self.master, text="Update Row", command=self.update_row)
        self.update_button.pack(pady=10)

        self.drop_column_button = tk.Button(self.master, text="Drop Column", command=self.drop_column)
        self.drop_column_button.pack(pady=5)

        self.fill_missing_button = tk.Button(self.master, text="Fill Missing Values", command=self.fill_missing_values)
        self.fill_missing_button.pack(pady=5)

        self.display_button = tk.Button(self.master, text="Display DataFrame", command=self.display_dataframe)
        self.display_button.pack(pady=5)

        self.info_label = tk.Label(self.master, text="")
        self.info_label.pack(pady=10)

    def load_dataset(self):
        file_path = filedialog.askopenfilename(title="Select CSV file", filetypes=[("CSV files", "*.csv")])
        if file_path:
            self.df = pd.read_csv(file_path)
            self.info_label.config(text=f"Dataset loaded. Shape: {self.df.shape}")

    def add_new_column(self):
        if self.df is not None:
            column_name = simpledialog.askstring("New Column", "Enter the name of the new column:")
            if column_name:
                default_value = simpledialog.askstring("Default Value", "Enter the default value for the new column:")
                if default_value is not None:
                    self.df[column_name] = default_value
                    self.info_label.config(
                        text=f"New column '{column_name}' added with default value '{default_value}'.")
                else:
                    self.info_label.config(text="Default value not provided.")
            else:
                self.info_label.config(text="Column name not provided.")
        else:
            self.info_label.config(text="Load a dataset first.")

    def update_row(self):
        if self.df is not None:
            index_to_update = simpledialog.askinteger("Update Row", "Enter the index of the row to update:")
            if index_to_update is not None and 0 <= index_to_update < len(self.df):
                updated_values = {}
                for column in self.df.columns:
                    new_value = simpledialog.askstring(f"Update {column}", f"Enter the new value for {column}:")
                    if new_value is not None:
                        updated_values[column] = new_value
                if updated_values:
                    self.df.loc[index_to_update] = updated_values
                    self.info_label.config(text=f"Row at index {index_to_update} updated.")
                else:
                    self.info_label.config(text="No values provided for update.")
            else:
                self.info_label.config(text="Invalid index.")
        else:
            self.info_label.config(text="Load a dataset first.")

    def drop_column(self):
        if self.df is not None:
            column_to_drop = simpledialog.askstring("Column to Drop", "Enter column name to drop:")
            if column_to_drop:
                try:
                    self.df = self.df.drop(columns=[column_to_drop])
                    self.info_label.config(text=f"Column '{column_to_drop}' dropped. New shape: {self.df.shape}")
                except KeyError:
                    self.info_label.config(text=f"Column '{column_to_drop}' not found.")
            else:
                self.info_label.config(text="Column name not provided.")
        else:
            self.info_label.config(text="Load a dataset first.")

    def fill_missing_values(self):
        if self.df is not None:
            self.df = self.df.ffill()  # Forward fill missing values
            self.info_label.config(text="Missing values filled using forward fill.")
        else:
            self.info_label.config(text="Load a dataset first.")

    def display_dataframe(self):
        if self.df is not None:
            top = tk.Toplevel(self.master)
            top.title("DataFrame Display")

            tree = ttk.Treeview(top)
            tree["columns"] = tuple(["Index"] + list(self.df.columns))

            for col in tree["columns"]:
                tree.heading(col, text=col)
                tree.column(col, anchor=tk.CENTER)

            for index, row in self.df.iterrows():
                values = [index] + row.tolist()
                tree.insert("", "end", values=values)

            tree.pack(fill=tk.BOTH, expand=True)

            scroll_y = ttk.Scrollbar(top, orient=tk.VERTICAL, command=tree.yview)
            scroll_y.pack(side=tk.RIGHT, fill=tk.Y)
            tree.configure(yscrollcommand=scroll_y.set)
        else:
            self.info_label.config(text="Load a dataset first.")


if __name__ == "__main__":
    root = tk.Tk()
    app = DataCleaningApp(root)
    root.mainloop()
